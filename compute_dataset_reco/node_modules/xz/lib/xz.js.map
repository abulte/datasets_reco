{"version":3,"sources":["../src/xz.js"],"names":[],"mappings":";;AAAA,IAAI,UAAU,QAAQ,+BAAR,CAAd;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,IAAI,kBAAkB,MAAM,IAA5B;;AAEA,MAAM,QAAN,SAAuB,OAAO,SAA9B,CAAwC;AACtC,cAAY,IAAZ,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC;AACjC,UAAM,OAAN;AACA,SAAK,MAAL,GAAc,IAAI,QAAQ,MAAZ,CAAmB,IAAnB,EAAyB,MAAzB,CAAd;AACD;;AAED,aAAW,KAAX,EAAkB,QAAlB,EAA4B,QAA5B,EAAsC;AACpC,SAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACA,SAAK,MAAL,CAAY,MAAM,MAAlB;AACA,aAAS,IAAT;AACD;;AAED,SAAO,QAAP,EAAiB;AACf,SAAK,MAAL,CAAY,eAAZ,EAA6B,QAAQ,aAArC;AACA,aAAS,IAAT;AACD;;AAED,SAAO,QAAP,EAAiB,KAAjB,EAAwB;AACtB,UAAM,UAAU,KAAK,GAAL,CAAS,WAAW,GAApB,EAAyB,eAAzB,CAAhB;AACA,UAAM,WAAW,EAAjB;AACA,QAAI,IAAI,CAAC,CAAT;AACA,WAAO,IAAI,CAAX,EAAc;AACZ,YAAM,SAAS,IAAI,MAAJ,CAAW,OAAX,CAAf;AACA,UAAI,KAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,EAA0B,KAA1B,CAAJ;AACA,eAAS,IAAT,CAAc,OAAO,KAAP,CAAa,CAAb,EAAgB,KAAK,GAAL,CAAS,CAAT,CAAhB,CAAd;AACD;AACD,SAAK,IAAL,CAAU,OAAO,MAAP,CAAc,QAAd,CAAV;AACD;AA3BqC;;AA8BxC,MAAM,UAAN,SAAyB,QAAzB,CAAkC;AAChC,cAAY,MAAZ,EAAoB,OAApB,EAA6B;AAC3B,UAAM,QAAQ,WAAd,EAA2B,MAA3B,EAAmC,OAAnC;AACD;AAH+B;;AAMlC,MAAM,YAAN,SAA2B,QAA3B,CAAoC;AAClC,cAAY,OAAZ,EAAqB;AACnB,UAAM,QAAQ,WAAd,EAA2B,IAA3B,EAAiC,OAAjC;AACD;AAHiC;;AAOpC,QAAQ,UAAR,GAAqB,UAArB;AACA,QAAQ,YAAR,GAAuB,YAAvB","file":"xz.js","sourcesContent":["let node_xz = require(\"../build/Release/node_xz.node\");\nlet stream = require(\"stream\");\nlet util = require(\"util\");\n\nlet DEFAULT_BUFSIZE = 128 * 1024;\n\nclass XzStream extends stream.Transform {\n  constructor(mode, preset, options) {\n    super(options);\n    this.engine = new node_xz.Engine(mode, preset);\n  }\n\n  _transform(chunk, encoding, callback) {\n    this.engine.feed(chunk);\n    this._drain(chunk.length);\n    callback(null);\n  }\n\n  _flush(callback) {\n    this._drain(DEFAULT_BUFSIZE, node_xz.ENCODE_FINISH);\n    callback(null);\n  }\n\n  _drain(estimate, flags) {\n    const bufSize = Math.min(estimate * 1.1, DEFAULT_BUFSIZE);\n    const segments = [];\n    let n = -1;\n    while (n < 0) {\n      const buffer = new Buffer(bufSize);\n      n = this.engine.drain(buffer, flags);\n      segments.push(buffer.slice(0, Math.abs(n)));\n    }\n    this.push(Buffer.concat(segments));\n  }\n}\n\nclass Compressor extends XzStream {\n  constructor(preset, options) {\n    super(node_xz.MODE_ENCODE, preset, options);\n  }\n}\n\nclass Decompressor extends XzStream {\n  constructor(options) {\n    super(node_xz.MODE_DECODE, null, options);\n  }\n}\n\n\nexports.Compressor = Compressor;\nexports.Decompressor = Decompressor;\n"]}